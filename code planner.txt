BinarySearchTreesAlgorithms{
    level order traversal{
        iterative{
            1 pass the root of the BST as a parameter
            2 create 2 queues
            3 enqueue one of the queues with the root of the BST
            4 create a while loop that checks if the first queue is not empty (if its empty the loop must end)
            5 within the loop made in step 4 create another loop to check if the first queue is empty but this time with the intention of dequeuing the loop until its empty
            6 within the loop created in step 5 before you dequeue the first queue make two if statements to check if the left or right children nodes (based on the BSTNode stored in the front of the queue) is not null.
            7 if the if statements above are true then enqueue the second queue with the left or right parent based on which if statement is true (enqueue the second queue with the left node if the left node is not null or the right node if the right node is not null)
            8 finaly you can dequeue the first queue (this will be the last part of the loop created in step 5)
            9 then repeat steps 5 to 8 but replacing everything done to the first queue with the second queue and from the second queue to the first queue (step 9 will be done in the loop creaated in step 4 but after the loop created in step 5 terminates)
        },
        recursive{
            1 find the height of the BST
            2 pass the root and the level to the function
            3 check if the root is null to return
            4 check if the level is 0 to print the root value
            5 if the level is greater than 0 recursively call the function for the left child then right child with the level for both being the current level minus 1
            6 when calling this function call it in a for loop that goes from 0 to the height of the BST so that each iteration of the loop will be passed into the function as the level
        }
    },
    pre order traversal{
        iterative{  
            1 pass the BST root into the function
            2 initialize a stack and a BST node variable
            3 push the root onto the stack
            4 create a loop that ends if the stack is empty
            5 in the loop specified in step 4 pop the top of the stack into the BST node variable
            6 print the data held in the BST node variable 
            7 check is the BST node variable has a right or left child or both
            8 if the BST node variable has a right child push the right child node onto the stack and if the node has a left child push the left child onto the stack
            9 at the end of the loop created in step for write a return statement to indicate the end of the function
        },
        recursive{
            1 pass the BST root into the function
            2 print the root's value
            3 call the function with the root's left child
            4 then call the function with the roots right child
        }
    },
    inorder traversal{
        iterative{
            1 pass the the bstnode root into the function
            2 initialize a stack to store the bst nodes in an appropriate order to be popped
            3 create a bstnode variable to store the poped the values and the nodes currently being worked on
            4 push the root onto the stack
            5 create a while loop that only ends when the stack is empty
            6 pop the top of the stack 
            7 check if the popped node has a right child, if it does push the right child onto the stack
            8 check if the left child exists, if it does push the current node onto the stack and push the left node onto the stack
            9 if the left child does not exists print the current node's data

        },
        recursive{
            1 pass the bstnode root into the function
            2 check if the root is equal to null, if it is return
            3 call the function recursively passing the left child of the root
            4 print the root data 
            5 call the function recursively passing the right child of the root
            6 return to end the function

        }
    },
    post order traversal{
        iterative{

        },
        recursive{

        }
    }
}
